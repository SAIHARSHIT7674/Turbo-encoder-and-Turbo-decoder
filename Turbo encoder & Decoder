`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 21.02.2024 14:02:01
// Design Name: 
// Module Name: genertor matrix
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module turbo_encoder(walsh1,walsh2,a,out);
input [7:0]a;
output reg [31:0]out;
reg [3:0]temp1,temp2;
reg [3:0]temp3,temp6;
reg [3:0]temp4,temp7;
reg [3:0]temp5,temp8;
input [3:0]walsh1;
input [3:0]walsh2;

always @(*)
begin
//RSC1
 temp1[0]=walsh1[0]^a[0];
 temp1[1]=walsh1[1]^a[0];
 temp1[2]=walsh1[2]^a[0];
 temp1[3]=walsh1[3]^a[0];

 temp2[0]=walsh2[0]^a[1];
 temp2[1]=walsh2[1]^a[1];
 temp2[2]=walsh2[2]^a[1];
 temp2[3]=walsh2[3]^a[1];

 out[1:0]= temp2[0]+temp1[0];
 out[3:2]= temp2[1]+temp1[1];
 out[5:4]= temp2[2]+temp1[2];
 out[7:6]= temp2[3]+temp1[3];


 temp3[0]=walsh1[0]^a[2];
 temp3[1]=walsh1[1]^a[2];
 temp3[2]=walsh1[2]^a[2];
 temp3[3]=walsh1[3]^a[2];

 temp4[0]=walsh2[0]^a[3];
 temp4[1]=walsh2[1]^a[3];
 temp4[2]=walsh2[2]^a[3];
 temp4[3]=walsh2[3]^a[3];

 out[9:8]  = temp3[0]+temp4[0];
 out[11:10]= temp3[1]+temp4[1];
 out[13:12]= temp3[2]+temp4[2];
 out[15:14]= temp3[3]+temp4[3];

//RSC2
 temp5[0]=walsh1[0]^a[4]; 
 temp5[1]=walsh1[1]^a[4];
 temp5[2]=walsh1[2]^a[4];
 temp5[3]=walsh1[3]^a[4];

 temp6[0]=walsh2[0]^a[5];
 temp6[1]=walsh2[1]^a[5];
 temp6[2]=walsh2[2]^a[5];
 temp6[3]=walsh2[3]^a[5];

 out[17:16]  = temp5[0]+temp6[0];
 out[19:18]= temp5[1]+temp6[1];
 out[21:20]= temp5[2]+temp6[2];
 out[23:22]= temp5[3]+temp6[3];

 temp7[0]=walsh1[0]^a[6];
 temp7[1]=walsh1[1]^a[6];
 temp7[2]=walsh1[2]^a[6];
 temp7[3]=walsh1[3]^a[6];

 temp8[0]=walsh2[0]^a[7];
 temp8[1]=walsh2[1]^a[7];
 temp8[2]=walsh2[2]^a[7];
 temp8[3]=walsh2[3]^a[7];

 out[25:24] =temp7[0]+temp8[0];
 out[27:26]= temp7[1]+temp8[1];
 out[29:28]= temp7[2]+temp8[2];
 out[31:30]= temp7[3]+temp8[3];
 
end
endmodule


module generator_matrix1(enable,out);
input enable;
output [3:0]out;
wire [3:0]temp1,temp2;

assign temp1=enable<<3;
assign temp2=enable<<1;
assign out=temp1+temp2;
endmodule

module generator_matrix2(enable,out);
input enable;
output [3:0]out;
wire [3:0]temp1,temp2;
assign temp1=enable<<3;
assign temp2=enable<<2;
assign out=temp1+temp2;
endmodule


module posterior(Data_in,sel,Data_out_0,Data_out_1);
//list the inputs and their sizes
    input [1:0]Data_in;
    input  sel;
    output reg [1:0]Data_out_0;
     output reg [1:0]Data_out_1;
 
    always @(Data_in or sel)
    begin
        case (sel)  //case statement with "sel"
            1'b0 : begin
                        Data_out_0 = Data_in;
                        Data_out_1 = 0;
                      end
           1'b1 : begin
                        Data_out_0 = 0;
                        Data_out_1 = Data_in; 
                      end
      
        endcase
    end
endmodule

module maximum(in,walsh,out);
input  [7:0]in;
input  [3:0]walsh;
output out;
wire [1:0]pos_out_0,pos_out_1,pos_out_2,pos_out_3;
wire [1:0]neg_out_0,neg_out_1,neg_out_2,neg_out_3;
wire [3:0]pos,neg;
posterior  d1(in[1:0],walsh[0],pos_out_0,neg_out_0);
posterior  d2(in[3:2],walsh[1],pos_out_1,neg_out_1);
posterior  d3(in[5:4],walsh[2],pos_out_2,neg_out_2);
posterior  d4(in[7:6],walsh[3],pos_out_3,neg_out_3);
assign pos=pos_out_0+pos_out_1+pos_out_2+pos_out_3;
assign neg=neg_out_0+neg_out_1+neg_out_2+neg_out_3;
assign out=(pos>neg)?1:0;
endmodule


module SISO_DECODER(walsh1,walsh2,in,out);
input  [7:0]in;
output [1:0]out; 
input  [3:0]walsh1,walsh2;
maximum w1(in,walsh1,out[0]);
maximum w2(in,walsh2,out[1]);
endmodule

module turbo_decoder(walsh1,walsh2,in1,out);
input  [3:0]walsh1,walsh2;
input  [31:0]in1;
output [7:0]out;
SISO_DECODER d1(walsh1,walsh2,in1[7:0],out[1:0]);
SISO_DECODER d2(walsh1,walsh2,in1[15:8],out[3:2]);
SISO_DECODER d3(walsh1,walsh2,in1[23:16],out[5:4]);
SISO_DECODER d4(walsh1,walsh2,in1[31:24],out[7:6]);
endmodule

module turbo_system_tb;

	// Inputs
	reg clk;
	reg rst;
	reg [7:0] data_in;

	// Outputs
	wire [7:0] out;
	wire [31:0]enc_out;

	
// Instantiate the Unit Under Test (UUT)

	turbo_system uut (
		.clk(clk), 
		.rst(rst), 
		.data_in(data_in), 
		.out(out),
		.enc_out(enc_out)
	);

       always #5 clk=~clk;
	initial begin
		// Initialize Inputs
		clk = 1; 
		rst = 1;
		data_in = 0;

		// Wait 100 ns for global reset to finish
		#20;
		repeat(32)
		begin
		
      rst = 0;
		data_in = {$random}%160;
		#10;
		end
		
//		repeat(4)
//		begin
	


	
//                 rst = 0;
//		cs = 1;
//		rd_en = 1;
//		wr_en = 0;

//		address = {$random}%4;
//
//		#20;
//		end


		#10 $finish;
	end 
endmodule


module turbo_system (clk,rst,data_in,out,enc_out);

input clk ;
input rst ;
input [31:0]data_in ;
output [31:0]out;
output [127:0]enc_out;
wire [7:0]RSC1_in,RSC2_in;

generator_matrix1  R1(~rst,RSC1_in);
generator_matrix2   R2(~rst,RSC2_in);

turbo_encoder	PE(RSC1_in,RSC2_in,data_in,enc_out);
turbo_decoder  R3(RSC1_in,RSC2_in,enc_out,out);
endmodule






